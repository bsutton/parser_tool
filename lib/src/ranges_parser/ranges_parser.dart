// Generated by 'peg2'
// https://pub.dev/packages/peg2

int _escape(int c) {
  switch (c) {
    case 110:
      return 0xA;
    case 114:
      return 0xD;
    case 116:
      return 0x9;
  }

  return c;
}

class RangesParser {
  static const int _eof = 1114112;

  static const List<String> _terminals = ['\'ranges\''];

  FormatException? error;

  bool ok = false;

  int _ch = 0;

  int _failStart = -1;

  int _failures0 = 0;

  int _length = 0;

  int _pos = 0;

  String _source = '';

  String? _unterminated;

  List<List<int>>? parse(String source) {
    _source = source;
    _reset();
    final result = _parseCharacterClass();
    if (!ok) {
      _buildError();
    }

    return result;
  }

  void _buildError() {
    final sink = StringBuffer();
    sink.write('Syntax error, ');
    if (_unterminated != null) {
      sink.write('unterminated ');
      sink.write(_unterminated);
    } else {
      final names = <String>[];
      final flags = <int>[];
      flags.add(_failures0);
      for (var i = 0, id = 0; i < flags.length; i++) {
        final flag = flags[i];
        for (var j = 0; j < 32; j++) {
          final mask = 1 << j;
          if (flag & mask != 0) {
            final name = _terminals[id];
            names.add(name);
          }

          id++;
        }
      }

      names.sort();
      if (names.isEmpty) {
        if (_failStart == _length) {
          sink.write('unexpected end of input');
        } else {
          sink.write('unexpected charcater ');
          final ch = _getChar(_failStart);
          if (ch >= 32 && ch < 126) {
            sink.write('\'');
            sink.write(String.fromCharCode(ch));
            sink.write('\'');
          } else {
            sink.write('(');
            sink.write(ch);
            sink.write(')');
          }
        }
      } else {
        sink.write('expected ');
        sink.write(names.join(', '));
      }
    }

    error = FormatException(sink.toString(), _source, _failStart);
  }

  @pragma('vm:prefer-inline')
  bool _fail(String name) {
    if (_failStart > _pos) {
      return false;
    }

    if (_failStart < _pos) {
      _failStart = _pos;
      _unterminated = null;
      _failures0 = 0;
    }

    return true;
  }

  @pragma('vm:prefer-inline')
  int _getChar(int pos) {
    if (pos < _source.length) {
      _ch = _source.codeUnitAt(pos);
      if (_ch >= 0xD800) {
        return _getChar32(pos);
      }

      return _ch;
    }

    return _eof;
  }

  @pragma('vm:prefer-inline')
  int _getChar32(int pos) {
    if (_ch >= 0xD800 && _ch <= 0xDBFF) {
      if (pos + 1 < _source.length) {
        final ch2 = _source.codeUnitAt(pos + 1);
        if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {
          _ch = ((_ch - 0xD800) << 10) + (ch2 - 0xDC00) + 0x10000;
        } else {
          throw FormatException('Unpaired high surrogate', _source, pos);
        }
      } else {
        throw FormatException('The source has been exhausted', _source, pos);
      }
    } else {
      if (_ch >= 0xDC00 && _ch <= 0xDFFF) {
        throw FormatException(
            'UTF-16 surrogate values are illegal in UTF-32', _source, pos);
      }
    }

    return _ch;
  }

  @pragma('vm:prefer-inline')
  int? _matchAny() {
    if (_ch == _eof) {
      ok = false;
      return null;
    }

    final ch = _ch;
    _pos += _ch <= 0xffff ? 1 : 2;
    _ch = _getChar(_pos);
    ok = true;
    return ch;
  }

  @pragma('vm:prefer-inline')
  int? _matchRange(int start, int end) {
    if (_ch >= start && _ch <= end) {
      final ch = _ch;
      _pos += _ch <= 0xffff ? 1 : 2;
      _ch = _getChar(_pos);
      ok = true;
      return ch;
    }

    ok = false;
    return null;
  }

  @pragma('vm:prefer-inline')
  int? _matchRanges(List<int> ranges) {
    // Use binary search
    for (var i = 0; i < ranges.length; i += 2) {
      if (ranges[i] <= _ch) {
        if (ranges[i + 1] >= _ch) {
          final ch = _ch;
          _pos += _ch <= 0xffff ? 1 : 2;
          _ch = _getChar(_pos);
          ok = true;
          return ch;
        }
      } else {
        break;
      }
    }

    ok = false;
    return null;
  }

  @pragma('vm:prefer-inline')
  T _nextChar<T>(T value) {
    ok = true;
    _pos += _ch <= 0xffff ? 1 : 2;
    if (_pos < _source.length) {
      _ch = _source.codeUnitAt(_pos);
      if (_ch >= 0xD800) {
        _ch = _getChar32(_pos);
      }

      return value;
    }

    _ch = _eof;
    return value;
  }

  @pragma('vm:prefer-inline')
  dynamic _parse$$eol() {
    ok = _source.startsWith('\r\n', _pos);
    if (ok) {
      _ch = _getChar(_pos += 2);
    }
    if (ok) {
      return null;
    }
    ok = false;
    if (_ch == 10 || _ch == 13) {
      _nextChar(_ch);
    }
    if (ok) {
      return null;
    }
    return null;
  }

  @pragma('vm:prefer-inline')
  int? _parse$$hexNumber() {
    int? $0;
    final $1 = _ch;
    final $2 = _pos;
    ok = false;
    if (_ch == 92) {
      _nextChar(_ch);
    }
    if (ok) {
      ok = false;
      if (_ch == 117) {
        _nextChar('u');
      }
      if (ok) {
        String? $3;
        final $4 = _pos;
        var $5 = 0;
        do {
          ok = false;
          if (_ch >= 48 && _ch <= 57 ||
              _ch >= 65 && _ch <= 70 ||
              _ch >= 97 && _ch <= 102) {
            _nextChar(_ch);
          }
          $5++;
        } while (ok);
        ok = $5 != 1;

        if (ok) {
          $3 = _source.substring($4, _pos);
        }
        if (ok) {
          final d = $3!;
          int? $$;
          $$ = int.parse(d, radix: 16);
          $0 = $$;
        }
      }
    }
    if (!ok) {
      _ch = $1;
      _pos = $2;
    }
    return $0;
  }

  @pragma('vm:prefer-inline')
  List<int>? _parse$$range() {
    List<int>? $0;
    final $1 = _ch;
    final $2 = _pos;
    final $3 = _parse$$rangeChar();
    if (ok) {
      ok = false;
      if (_ch == 45) {
        _nextChar('-');
      }
      if (ok) {
        final $4 = _parse$$rangeChar();
        if (ok) {
          final s = $3!;
          final e = $4!;
          List<int>? $$;
          $$ = [s, e];
          $0 = $$;
        }
      }
    }
    if (ok) {
      return $0;
    }
    _ch = $1;
    _pos = $2;
    final $5 = _parse$$rangeChar();
    if (ok) {
      final c = $5!;
      List<int>? $$;
      $$ = [c, c];
      $0 = $$;
    }
    if (ok) {
      return $0;
    }
    return $0;
  }

  int? _parse$$rangeChar() {
    int? $0;
    final $1 = _ch;
    final $2 = _pos;
    ok = false;
    if (_ch == 92) {
      _nextChar('\\');
    }
    if (ok) {
      int? $3;
      ok = false;
      if (_ch >= 92 && _ch <= 93 || _ch == 110 || _ch == 114 || _ch == 116) {
        $3 = _nextChar(_ch);
      }
      if (ok) {
        final c = $3!;
        int? $$;
        $$ = _escape(c);
        $0 = $$;
      }
    }
    if (ok) {
      return $0;
    }
    _ch = $1;
    _pos = $2;
    $0 = _parse$$hexNumber();

    if (ok) {
      return $0;
    }
    ok = false;
    if (_ch >= 92 && _ch <= 93) {
      _nextChar(_ch);
    }
    ok = !ok;
    if (ok) {
      final $4 = _ch;
      final $5 = _pos;
      _parse$$eol();
      _ch = $4;
      _pos = $5;
      ok = !ok;
      if (ok) {
        $0 = _matchAny();
        if (ok) {
          final c = $0!;
          $0 = c;
        }
      }
    }
    if (ok) {
      return $0;
    }
    return $0;
  }

  @pragma('vm:prefer-inline')
  List<List<int>>? _parseCharacterClass() {
    List<List<int>>? $0;
    $0 = _parse_ranges();

    return $0;
  }

  @pragma('vm:prefer-inline')
  List<List<int>>? _parse_ranges() {
    List<List<int>>? $0;
    final $1 = <List<int>>[];
    while (true) {
      final $2 = _parse$$range();
      if (!ok) {
        break;
      }
      $1.add($2!);
    }
    if ($1.isNotEmpty) {
      $0 = $1;
      ok = true;
    }

    if (!ok) {
      if (_fail('\'ranges\'')) {
        _failures0 |= 0x1;
      }
    }
    return $0;
  }

  void _reset() {
    error = null;
    _failStart = 0;
    _failures0 = 0;
    _length = _source.length;
    _pos = 0;
    _unterminated = null;
    _ch = _getChar(0);
    ok = false;
  }
}
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
